// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Fetch from "bs-fetch/src/Fetch.js";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as Js_json from "bs-platform/lib/es6/js_json.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Caml_exceptions from "bs-platform/lib/es6/caml_exceptions.js";

var PostError = Caml_exceptions.create("Request-ReactHooksTemplate.PostError");

function post(url, payload) {
  var string_of_payload = JSON.stringify(payload);
  return fetch(url, Fetch.RequestInit[/* make */0](/* Post */2, {
                        "Content-type": "application/json"
                      }, Caml_option.some(string_of_payload), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* () */0)).then((function (prim) {
                  return prim.json();
                })).then((function (response) {
                var match = Js_json.decodeObject(response);
                if (match !== undefined) {
                  var decodedRes = Caml_option.valFromOption(match);
                  var match$1 = Js_dict.get(decodedRes, "error");
                  if (match$1 !== undefined) {
                    var match$2 = Js_json.decodeObject(Caml_option.valFromOption(match$1));
                    if (match$2 !== undefined) {
                      var match$3 = Js_dict.get(Caml_option.valFromOption(match$2), "message");
                      if (match$3 !== undefined) {
                        var match$4 = Js_json.decodeString(Caml_option.valFromOption(match$3));
                        if (match$4 !== undefined) {
                          return Promise.reject([
                                      PostError,
                                      match$4
                                    ]);
                        } else {
                          return Promise.reject([
                                      PostError,
                                      "Post Error"
                                    ]);
                        }
                      } else {
                        return Promise.resolve(decodedRes);
                      }
                    } else {
                      return Promise.resolve(decodedRes);
                    }
                  } else {
                    return Promise.resolve(decodedRes);
                  }
                } else {
                  return Promise.resolve({ });
                }
              }));
}

export {
  PostError ,
  post ,
  
}
/* No side effect */
