// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as React from "react";
import * as Js_dict from "bs-platform/lib/es6/js_dict.js";
import * as ReactDom from "react-dom";
import * as Caml_array from "bs-platform/lib/es6/caml_array.js";
import * as CrossSvg from "./cross.svg";

((require("./Modal.css")));

var modalContext = React.createContext((function (param) {
        return /* () */0;
      }));

function makeProps(value, children, param) {
  return {
          value: value,
          children: children
        };
}

var make = modalContext.Provider;

var ContextProvider = /* module */[
  /* makeProps */makeProps,
  /* make */make
];

var make$1 = CrossSvg.default;

var Cross = /* module */[/* make */make$1];

function Modal(Props) {
  var children = Props.children;
  var onModalClose = Props.onModalClose;
  var modalRef = React.useRef(null);
  var handleTabKey = function (e) {
    var current = modalRef.current;
    if (current == null) {
      return /* () */0;
    } else {
      var elements = current.querySelectorAll("a[href], button, textarea, input[type='text'], input[type='radion'], input[type='checkbox'], select");
      var firstElement = Caml_array.caml_array_get(elements, 0);
      var lastElement = Caml_array.caml_array_get(elements, elements.length - 1 | 0);
      if (!e.shiftKey && document.activeElement !== firstElement) {
        firstElement.focus();
        e.preventDefault();
      }
      if (e.shiftKey && document.activeElement !== lastElement) {
        lastElement.focus();
        e.preventDefault();
        return /* () */0;
      } else {
        return 0;
      }
    }
  };
  var keyListenerMap = Js_dict.fromArray(/* array */[
        /* tuple */[
          "27",
          (function (param) {
              return Curry._1(onModalClose, /* () */0);
            })
        ],
        /* tuple */[
          "9",
          handleTabKey
        ]
      ]);
  React.useEffect((function () {
          var keyDownListener = function (e) {
            var keyCodeStr = String(e.keyCode);
            var match = Js_dict.get(keyListenerMap, keyCodeStr);
            if (match !== undefined) {
              return Curry._1(match, e);
            } else {
              return /* () */0;
            }
          };
          document.addEventListener("keydown", keyDownListener);
          return (function (param) {
                    document.removeEventListener("keyDown", keyDownListener);
                    return /* () */0;
                  });
        }));
  return ReactDom.createPortal(React.createElement("div", {
                  "aria-modal": true,
                  className: "modal-container",
                  role: "container"
                }, React.createElement("div", {
                      ref: modalRef,
                      className: "modal-content"
                    }, React.createElement(make, makeProps(onModalClose, children, /* () */0)))), document.body);
}

function Modal$Header(Props) {
  var children = Props.children;
  var onModalClose = React.useContext(modalContext);
  return React.createElement("header", {
              className: "modal-header"
            }, children, React.createElement("button", {
                  className: "cross-btn",
                  title: "close Modal",
                  onClick: (function (param) {
                      return Curry._1(onModalClose, /* () */0);
                    })
                }, React.createElement(make$1, { })));
}

var Header = /* module */[/* make */Modal$Header];

function Modal$Body(Props) {
  var children = Props.children;
  return React.createElement("article", {
              className: "modal-body"
            }, children);
}

var Body = /* module */[/* make */Modal$Body];

function Modal$Footer(Props) {
  var children = Props.children;
  return React.createElement("footer", {
              className: "modal-footer"
            }, children);
}

function Modal$Footer$CloseBtn(Props) {
  var children = Props.children;
  var onModalClose = React.useContext(modalContext);
  return React.createElement("button", {
              className: "close-button",
              title: "close modal",
              onClick: (function (param) {
                  return Curry._1(onModalClose, /* () */0);
                })
            }, children);
}

var CloseBtn = /* module */[/* make */Modal$Footer$CloseBtn];

var Footer = /* module */[
  /* make */Modal$Footer,
  /* CloseBtn */CloseBtn
];

var make$2 = Modal;

export {
  modalContext ,
  ContextProvider ,
  Cross ,
  make$2 as make,
  Header ,
  Body ,
  Footer ,
  
}
/*  Not a pure module */
